
Summary:
--------
OpenTREP aims at providing a clean API, and the corresponding C++
implementation, for parsing travel-focused requests.
It powers the http://search-travel.org Web site.

OpenTREP uses Xapian (http://www.xapian.org) for the Information Retrieval part,
on freely available travel-related data (e.g., country names and codes,
city names and codes, airline names and codes, etc.), mainly to be found
in the OpenTravelData project (http://github.com/opentraveldata/opentraveldata):
http://github.com/opentraveldata/opentraveldata/tree/master/opentraveldata

OpenTREP exposes a simple, clean and object-oriented, API. For instance,
the OPENTREP::interpretTravelRequest() method takes, as input, a string
containing the travel request, and yields, as output, the list of the
recognized terms as well as their corresponding types.
As an example, the travel request
'Washington DC Beijing Monday a/r +AA -UA 1 week 2 adults 1 dog' would give
the following list:
 * Origin airport: Washington, DC, USA
 * Destination airport: Beijing, China
 * Date of travel: next Monday
 * Date of return: 1 week after next Monday
 * Preferred airline: American Airlines; non-preferred airline: United Airlines
 * Number of travelers: 2 adults and a dog

The output can then be used by other systems, for instance to book the
corresponding travel or to visualize it on a map and calendar and to
share it with others.

OpenTREP makes an extensive use of existing open-source libraries for
increased functionality, speed and accuracy. In particular the
Boost (C++ Standard Extensions: http://www.boost.org) and
SOCI (http://soci.sourceforge.net) libraries are used.

Note that OpenTREP currently only recognises points of reference (POR),
as to be found in the ori_por_public.csv file:
http://github.com/opentraveldata/opentraveldata/tree/master/opentraveldata/optd_por_public.csv
A good complementary tool is GeoBase (http://opentraveldata.github.io/geobases/),
a Python-based software able to access to any travel-related data source.


Getting and installing from the Fedora/CentOS/RedHat distribution:
------------------------------------------------------------------
Just use Yum:
yum -y install opentrep-devel opentrep-doc

You can also get the RPM packages (which may work on Linux
distributions like Novel Suse and Mandriva) from the Fedora repository
(e.g., for Fedora 21,
http://fr2.rpmfind.net/linux/fedora/releases/21/Everything/)


Building the library and test binary from Git repository:
---------------------------------------------------------
The Sourceforge Git repository may be cloned as following:
git clone https://github.com/trep/opentrep.git opentrepgit
cd opentrepgit
git checkout trunk

Then, you need the following packages (Fedora/RedHat/CentOS names here, 
but names may vary according to distributions):
  * cmake
  * gcc-c++
  * boost-devel / libboost-dev
  * python-devel / python-dev
  * gettext-devel / gettext-dev
  * sqlite3-devel / libsqlite3-dev
  * readline-devel / readline-dev
  * doxygen
  * tetex-latex (optional)
  * rpm-build (optional)

Building the library and test binary from the tarball:
------------------------------------------------------
The latest stable source tarball (opentrep*.tar.gz or .bz2) can be found here:
http://sourceforge.net/project/showfiles.php?group_id=252803

To customise the following to your environment, you can alter the path
to the installation directory:
export INSTALL_BASEDIR=/home/user/dev/deliveries
export TREP_VER=0.6.1
if [ -d /usr/lib64 ]; then LIBSUFFIX=64; fi
export LIBSUFFIX_4_CMAKE="-DLIB_SUFFIX=$LIBSUFFIX"

Then, as usual:
* To configure the project, type something like:
$ mkdir build && cd build
$ cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_BASEDIR}/opentrep-$TREP_VER \
   -DCMAKE_BUILD_TYPE:STRING=Debug -DINSTALL_DOC:BOOL=ON \
   -DRUN_GCOV:BOOL=OFF ${LIBSUFFIX_4_CMAKE} ..
* To build the project, type:
$ make
* To test the project, type:
$ make check
* To install the library (libopentrep*.so*) and the binary (opentrep), just type:
  make install
  cd ${INSTALL_BASEDIR}
  rm -f opentrep-stable && ln -s opentrep-${TREP_VER} opentrep-stable
  cd -
* To package the source files, type:
$ make dist
* To package the binary and the documentation:
$ make package
* To run the local binary version:
$ ./opentrep/opentrep-{dbmgr,indexer,searcher}
* To run the installed version (the first following line must be done once
  per session):
$ export TREP_LIB=$INSTALL_BASEDIR/opentrep-$TREP_VER/lib$LIBSUFFIX
$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TREP_LIB
$ $INSTALL_BASEDIR/opentrep-$TREP_VER/bin/opentrep-{dbmgr,indexer,searcher}

Underlying (relational) database, SQLite or MySQL, if any:
----------------------------------------------------------
OpenTREP may use, if so configured, a relational database. For now,
two database products are supported, SQLite3 and MySQL/MariaDB.
The database accelerates the look up of POR by (IATA, ICAO, FAA) codes
and of Geonames ID. When OpenTREP is configured to run without database,
those codes and Geonames ID are full-text searched directly with Xapian.
Note that the database can be managed directly, i.e., without the
OpenTREP search interface on top of it, thanks to the opentrep-dbmgr utility,
which is detailed below.

Filling the (relational) database, SQLite or MySQL, if any:
-----------------------------------------------------------
Here, for clarity reason, we use the local version. It is easy (see above)
to derive the same commands with the installed version.
The following command prompts a shell:
$ ./opentrep/opentrep-dbmgr -t sqlite
Then, within the opentrep> shell, a typical sequence for SQLite would be:
 create_user
 create_tables
 fill_from_por_file
 create_indexes
 list_nb
 list_by_iata nce
 list_by_icao lfmn
 list_by_faa afm
 list_by_geonameid 6299418

The following command prompts a shell:
  ./opentrep/opentrep-dbmgr -t mysql
Then, within the opentrep> shell, a typical sequence for MySQL/MariaDB would be:
 reset_connection_string db=mysql user=root password=<passwd>
 create_user
 reset_connection_string db=trep_trep user=trep password=trep
 create_tables
 fill_from_por_file
 create_indexes
 list_nb
 list_by_iata nce
 list_by_icao lfmn
 list_by_faa afm
 list_by_geonameid 6299418

Xapian indexing with standard installation:
-------------------------------------------
By default, the Xapian indexer runs without filling any relational database,
as that step can be performed independantly by the opentrep-dbmgr, as seen above.

Xapian indexing without any relational database:
$ ./opentrep/opentrep-indexer

(Optional) Filling and indexing the SQLite database:
$ ./opentrep/opentrep-dbmgr -t sqlite
    create_user
    create_tables
    fill_from_por_file
    create_indexes
    quit

(Optional) Filling and indexing the MySQL/MariaDB database:
$ ./opentrep/opentrep-dbmgr -t mysql
    reset_connection_string db=mysql user=root password=<passwd>
    create_user
    reset_connection_string db=trep_trep user=trep password=trep
    create_tables
    fill_from_por_file
    create_indexes
    quit

Xapian indexing for an ad hoc deployed Web application:
-------------------------------------------------------
Xapian indexing without any relational database:
$ ./opentrep/opentrep-indexer -d /var/www/webapps/opentrep/trep/traveldb

(Optional) Filling and indexing the SQLite database:
$ ./opentrep/opentrep-dbmgr -t sqlite -s /var/www/webapps/opentrep/trep/sqlite/travel.db
    create_user
    create_tables
    fill_from_por_file
    create_indexes
    quit

Searching:
----------
Searching without any relational database support:
$ ./opentrep/opentrep-searcher -q nce sfo

Searching with SQLite (note that it should be quicker than without a database):
$ ./opentrep/opentrep-searcher -t sqlite -q nce sfo

Searching with MySQL/MariaDB:
$ ./opentrep/opentrep-searcher -t mysql -q nce sfo

Searching with SQLite (with Xapian and SQLite DB in a webapps directory):
$ ./opentrep/opentrep-searcher -d /var/www/webapps/opentrep/trep/traveldb -s /var/www/webapps/opentrep/trep/sqlite/travel.db -q nce sfo


Checking that the Python module works:
--------------------------------------
PYTHONPATH=${INSTALL_BASEDIR}/opentrep-$TREP_VER/lib${LIBSUFFIX}/python/opentrep/ \
 python -c "import libpyopentrep; \
 openTrepLibrary = libpyopentrep.OpenTrepSearcher(); \
 initOK = openTrepLibrary.init ('/tmp/opentrep/xapian_traveldb/', 'nodb', '', 'pyopentrep.log'); \
 print openTrepLibrary.search ('S', 'los las')"

Running the Django-based application server:
--------------------------------------------
export TREP_LIB=$INSTALL_BASEDIR/opentrep-$TREP_VER/lib$LIBSUFFIX
# Optional:
export TREP_TRAVELDB=/tmp/opentrep/traveldb
export TREP_LOG=django_trep.log
cd gui/django/opentrep
# The first time, the database must be initialised:
#./manage.py syncdb localhost:8000
# Add the Python library directories to PYTHONPATH:
export PYTHONPATH=$PYTHONPATH:$INSTALL_BASEDIR/opentrep-$TREP_VER/lib$LIBSUFFIX
export PYTHONPATH=$PYTHONPATH:$INSTALL_BASEDIR/opentrep-$TREP_VER/lib$LIBSUFFIX/python/opentrep
# Start the Django Web application server
./manage.py runserver localhost:8000
# In another Shell, check that everything went fine with, for instance:
midori http://localhost:8000/search?q=rio de janero reykyavik sna francicso


----
Denis Arnaud (November 2014)

